// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace KomminarLabs.InfluxDB3
{
    /// <summary>
    /// Creates and manages a database.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using InfluxDB3 = KomminarLabs.InfluxDB3;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var signals = new InfluxDB3.Database("signals", new()
    ///     {
    ///         RetentionPeriod = 604800,
    ///         PartitionTemplates = new[]
    ///         {
    ///             new InfluxDB3.Inputs.DatabasePartitionTemplateArgs
    ///             {
    ///                 Type = "tag",
    ///                 Value = "line",
    ///             },
    ///             new InfluxDB3.Inputs.DatabasePartitionTemplateArgs
    ///             {
    ///                 Type = "tag",
    ///                 Value = "station",
    ///             },
    ///             new InfluxDB3.Inputs.DatabasePartitionTemplateArgs
    ///             {
    ///                 Type = "time",
    ///                 Value = "%Y-%m-%d",
    ///             },
    ///             new InfluxDB3.Inputs.DatabasePartitionTemplateArgs
    ///             {
    ///                 Type = "bucket",
    ///                 Value = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["tagName"] = "temperature",
    ///                     ["numberOfBuckets"] = 10,
    ///                 }),
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [InfluxDB3ResourceType("influxdb3:index/database:Database")]
    public partial class Database : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the account that the cluster belongs to.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// The ID of the cluster that you want to manage.
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// The maximum number of columns per table for the cluster database. The default is `200`
        /// </summary>
        [Output("maxColumnsPerTable")]
        public Output<int> MaxColumnsPerTable { get; private set; } = null!;

        /// <summary>
        /// The maximum number of tables for the cluster database. The default is `500`
        /// </summary>
        [Output("maxTables")]
        public Output<int> MaxTables { get; private set; } = null!;

        /// <summary>
        /// The name of the cluster database. The Length should be between `[ 1 .. 64 ]` characters. **Note:** Database names can't be updated.  An update will result in resource replacement. After a database is deleted, you cannot [reuse](https://docs.influxdata.com/influxdb/cloud-dedicated/admin/databases/delete/#cannot-reuse-database-names) the same name for a new database.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A template for [partitioning](https://docs.influxdata.com/influxdb/cloud-dedicated/admin/custom-partitions/partition-templates/) a cluster database. **Note:** A partition template can include up to 7 total tag and tag bucket parts and only 1 time part. You can only apply a partition template when creating a database. You [can't update a partition template](https://docs.influxdata.com/influxdb/cloud-dedicated/admin/databases/create/#partition-templates-can-only-be-applied-on-create) on an existing database. An update will result in resource replacement.
        /// </summary>
        [Output("partitionTemplates")]
        public Output<ImmutableArray<Outputs.DatabasePartitionTemplate>> PartitionTemplates { get; private set; } = null!;

        /// <summary>
        /// The retention period of the cluster database in nanoseconds. The default is `0`. If the retention period is not set or is set to `0`, the database will have infinite retention.
        /// </summary>
        [Output("retentionPeriod")]
        public Output<int> RetentionPeriod { get; private set; } = null!;


        /// <summary>
        /// Create a Database resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Database(string name, DatabaseArgs? args = null, CustomResourceOptions? options = null)
            : base("influxdb3:index/database:Database", name, args ?? new DatabaseArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Database(string name, Input<string> id, DatabaseState? state = null, CustomResourceOptions? options = null)
            : base("influxdb3:index/database:Database", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/komminarlabs",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Database resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Database Get(string name, Input<string> id, DatabaseState? state = null, CustomResourceOptions? options = null)
        {
            return new Database(name, id, state, options);
        }
    }

    public sealed class DatabaseArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The maximum number of columns per table for the cluster database. The default is `200`
        /// </summary>
        [Input("maxColumnsPerTable")]
        public Input<int>? MaxColumnsPerTable { get; set; }

        /// <summary>
        /// The maximum number of tables for the cluster database. The default is `500`
        /// </summary>
        [Input("maxTables")]
        public Input<int>? MaxTables { get; set; }

        /// <summary>
        /// The name of the cluster database. The Length should be between `[ 1 .. 64 ]` characters. **Note:** Database names can't be updated.  An update will result in resource replacement. After a database is deleted, you cannot [reuse](https://docs.influxdata.com/influxdb/cloud-dedicated/admin/databases/delete/#cannot-reuse-database-names) the same name for a new database.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("partitionTemplates")]
        private InputList<Inputs.DatabasePartitionTemplateArgs>? _partitionTemplates;

        /// <summary>
        /// A template for [partitioning](https://docs.influxdata.com/influxdb/cloud-dedicated/admin/custom-partitions/partition-templates/) a cluster database. **Note:** A partition template can include up to 7 total tag and tag bucket parts and only 1 time part. You can only apply a partition template when creating a database. You [can't update a partition template](https://docs.influxdata.com/influxdb/cloud-dedicated/admin/databases/create/#partition-templates-can-only-be-applied-on-create) on an existing database. An update will result in resource replacement.
        /// </summary>
        public InputList<Inputs.DatabasePartitionTemplateArgs> PartitionTemplates
        {
            get => _partitionTemplates ?? (_partitionTemplates = new InputList<Inputs.DatabasePartitionTemplateArgs>());
            set => _partitionTemplates = value;
        }

        /// <summary>
        /// The retention period of the cluster database in nanoseconds. The default is `0`. If the retention period is not set or is set to `0`, the database will have infinite retention.
        /// </summary>
        [Input("retentionPeriod")]
        public Input<int>? RetentionPeriod { get; set; }

        public DatabaseArgs()
        {
        }
        public static new DatabaseArgs Empty => new DatabaseArgs();
    }

    public sealed class DatabaseState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the account that the cluster belongs to.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// The ID of the cluster that you want to manage.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// The maximum number of columns per table for the cluster database. The default is `200`
        /// </summary>
        [Input("maxColumnsPerTable")]
        public Input<int>? MaxColumnsPerTable { get; set; }

        /// <summary>
        /// The maximum number of tables for the cluster database. The default is `500`
        /// </summary>
        [Input("maxTables")]
        public Input<int>? MaxTables { get; set; }

        /// <summary>
        /// The name of the cluster database. The Length should be between `[ 1 .. 64 ]` characters. **Note:** Database names can't be updated.  An update will result in resource replacement. After a database is deleted, you cannot [reuse](https://docs.influxdata.com/influxdb/cloud-dedicated/admin/databases/delete/#cannot-reuse-database-names) the same name for a new database.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("partitionTemplates")]
        private InputList<Inputs.DatabasePartitionTemplateGetArgs>? _partitionTemplates;

        /// <summary>
        /// A template for [partitioning](https://docs.influxdata.com/influxdb/cloud-dedicated/admin/custom-partitions/partition-templates/) a cluster database. **Note:** A partition template can include up to 7 total tag and tag bucket parts and only 1 time part. You can only apply a partition template when creating a database. You [can't update a partition template](https://docs.influxdata.com/influxdb/cloud-dedicated/admin/databases/create/#partition-templates-can-only-be-applied-on-create) on an existing database. An update will result in resource replacement.
        /// </summary>
        public InputList<Inputs.DatabasePartitionTemplateGetArgs> PartitionTemplates
        {
            get => _partitionTemplates ?? (_partitionTemplates = new InputList<Inputs.DatabasePartitionTemplateGetArgs>());
            set => _partitionTemplates = value;
        }

        /// <summary>
        /// The retention period of the cluster database in nanoseconds. The default is `0`. If the retention period is not set or is set to `0`, the database will have infinite retention.
        /// </summary>
        [Input("retentionPeriod")]
        public Input<int>? RetentionPeriod { get; set; }

        public DatabaseState()
        {
        }
        public static new DatabaseState Empty => new DatabaseState();
    }
}
