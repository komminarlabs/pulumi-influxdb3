// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package influxdb3

import (
	"context"
	"reflect"

	"github.com/komminarlabs/pulumi-influxdb3/sdk/go/influxdb3/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves a database. Use this data source to retrieve information for a specific database.
func LookupDatabase(ctx *pulumi.Context, args *LookupDatabaseArgs, opts ...pulumi.InvokeOption) (*LookupDatabaseResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDatabaseResult
	err := ctx.Invoke("influxdb3:index/getDatabase:getDatabase", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDatabase.
type LookupDatabaseArgs struct {
	// The name of the cluster database.
	Name string `pulumi:"name"`
}

// A collection of values returned by getDatabase.
type LookupDatabaseResult struct {
	// The ID of the account that the cluster belongs to.
	AccountId string `pulumi:"accountId"`
	// The ID of the cluster that you want to manage.
	ClusterId string `pulumi:"clusterId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The maximum number of columns per table for the cluster database.
	MaxColumnsPerTable int `pulumi:"maxColumnsPerTable"`
	// The maximum number of tables for the cluster database.
	MaxTables int `pulumi:"maxTables"`
	// The name of the cluster database.
	Name string `pulumi:"name"`
	// The template partitioning of the cluster database.
	PartitionTemplates []GetDatabasePartitionTemplate `pulumi:"partitionTemplates"`
	// The retention period of the cluster database in nanoseconds.
	RetentionPeriod int `pulumi:"retentionPeriod"`
}

func LookupDatabaseOutput(ctx *pulumi.Context, args LookupDatabaseOutputArgs, opts ...pulumi.InvokeOption) LookupDatabaseResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDatabaseResult, error) {
			args := v.(LookupDatabaseArgs)
			r, err := LookupDatabase(ctx, &args, opts...)
			var s LookupDatabaseResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDatabaseResultOutput)
}

// A collection of arguments for invoking getDatabase.
type LookupDatabaseOutputArgs struct {
	// The name of the cluster database.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupDatabaseOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDatabaseArgs)(nil)).Elem()
}

// A collection of values returned by getDatabase.
type LookupDatabaseResultOutput struct{ *pulumi.OutputState }

func (LookupDatabaseResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDatabaseResult)(nil)).Elem()
}

func (o LookupDatabaseResultOutput) ToLookupDatabaseResultOutput() LookupDatabaseResultOutput {
	return o
}

func (o LookupDatabaseResultOutput) ToLookupDatabaseResultOutputWithContext(ctx context.Context) LookupDatabaseResultOutput {
	return o
}

// The ID of the account that the cluster belongs to.
func (o LookupDatabaseResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// The ID of the cluster that you want to manage.
func (o LookupDatabaseResultOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseResult) string { return v.ClusterId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupDatabaseResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseResult) string { return v.Id }).(pulumi.StringOutput)
}

// The maximum number of columns per table for the cluster database.
func (o LookupDatabaseResultOutput) MaxColumnsPerTable() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDatabaseResult) int { return v.MaxColumnsPerTable }).(pulumi.IntOutput)
}

// The maximum number of tables for the cluster database.
func (o LookupDatabaseResultOutput) MaxTables() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDatabaseResult) int { return v.MaxTables }).(pulumi.IntOutput)
}

// The name of the cluster database.
func (o LookupDatabaseResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseResult) string { return v.Name }).(pulumi.StringOutput)
}

// The template partitioning of the cluster database.
func (o LookupDatabaseResultOutput) PartitionTemplates() GetDatabasePartitionTemplateArrayOutput {
	return o.ApplyT(func(v LookupDatabaseResult) []GetDatabasePartitionTemplate { return v.PartitionTemplates }).(GetDatabasePartitionTemplateArrayOutput)
}

// The retention period of the cluster database in nanoseconds.
func (o LookupDatabaseResultOutput) RetentionPeriod() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDatabaseResult) int { return v.RetentionPeriod }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDatabaseResultOutput{})
}
