// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Retrieves a database. Use this data source to retrieve information for a specific database.
 */
export function getDatabase(args: GetDatabaseArgs, opts?: pulumi.InvokeOptions): Promise<GetDatabaseResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("influxdb3:index/getDatabase:getDatabase", {
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getDatabase.
 */
export interface GetDatabaseArgs {
    /**
     * The name of the cluster database.
     */
    name: string;
}

/**
 * A collection of values returned by getDatabase.
 */
export interface GetDatabaseResult {
    /**
     * The ID of the account that the cluster belongs to.
     */
    readonly accountId: string;
    /**
     * The ID of the cluster that you want to manage.
     */
    readonly clusterId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The maximum number of columns per table for the cluster database.
     */
    readonly maxColumnsPerTable: number;
    /**
     * The maximum number of tables for the cluster database.
     */
    readonly maxTables: number;
    /**
     * The name of the cluster database.
     */
    readonly name: string;
    /**
     * The template partitioning of the cluster database.
     */
    readonly partitionTemplates: outputs.GetDatabasePartitionTemplate[];
    /**
     * The retention period of the cluster database in nanoseconds.
     */
    readonly retentionPeriod: number;
}
/**
 * Retrieves a database. Use this data source to retrieve information for a specific database.
 */
export function getDatabaseOutput(args: GetDatabaseOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDatabaseResult> {
    return pulumi.output(args).apply((a: any) => getDatabase(a, opts))
}

/**
 * A collection of arguments for invoking getDatabase.
 */
export interface GetDatabaseOutputArgs {
    /**
     * The name of the cluster database.
     */
    name: pulumi.Input<string>;
}
